type AddCommentResponse {
  ok: Boolean!
  error: String
}

type Mutation {
  addComment(postId: String!, text: String!): AddCommentResponse!
  toggleLike(postId: String!): ToggleLikeResponse!
  hostingPost(thumbNail: String!, caption: String!, location: String!, maxPeopleCount: Int!, checkIn: String!, checkOut: String!, price: Int!): HostingPostResponse!
  cancelReservation(id: String!): CancelReservationResponse!
  makeReservation(postId: String!, guestCount: Int!, arriveAt: String!, leaveAt: String!): MakeReservationResponse!
  confirmSecret(email: String!, loginSecret: String!): ConfirmSecretResponse!
  createAccount(username: String!, email: String!, firstName: String!, lastName: String!): CreateAccountResponse!
  editUser(firstName: String, lastName: String, avatar: String, username: String): EditUserResponse!
  requestSecret(email: String!): RequestSecretResponse!
}

type ToggleLikeResponse {
  ok: Boolean!
  error: String
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  fullName: String
  avatar: String
  username: String!
  email: String!
  loginSecret: String
  isSelf: Boolean!
  hostings: [Post!]!
  reservations: [Reservation!]!
  likes: [Like!]!
  comments: [Comment!]!
  createdAt: String!
  updatedAt: String!
  createdDate: String
  createdTime: String
}

type Post {
  id: ID!
  thumbNail: String!
  caption: String!
  location: String!
  host: User!
  likes: [Like!]!
  comments: [Comment!]!
  isLiked: Boolean!
  likeCount: Int!
  commentCount: Int!
  maxPeopleCount: Int!
  checkIn: String!
  checkOut: String!
  price: Int!
  createdAt: String!
  updatedAt: String!
  createdDate: String
  createdTime: String
}

type Reservation {
  id: ID!
  post: Post!
  user: User!
  guestCount: Int!
  arriveAt: String!
  leaveAt: String!
  createdAt: String!
  updatedAt: String!
  createdDate: String
  createdTime: String
}

type Like {
  id: ID!
  post: Post!
  user: User!
  createdAt: String!
  updatedAt: String!
  createdDate: String
  createdTime: String
}

type Comment {
  id: ID!
  text: String!
  post: Post!
  user: User!
  createdAt: String!
  updatedAt: String!
  createdDate: String
  createdTime: String
}

type HostingPostResponse {
  ok: Boolean!
  error: String
  post: Post
}

type Query {
  searchPost(term: String!, priceGte: Int, priceLte: Int): [Post!]!
  seeFeed: [Post!]!
  seeFullPost(postId: String!): SeeFullPostResponse!
  myProfile: User!
  seeUser(username: String!): User!
}

type SeeFullPostResponse {
  ok: Boolean!
  error: String
  post: Post
}

type CancelReservationResponse {
  ok: Boolean!
  error: String
}

type MakeReservationResponse {
  ok: Boolean!
  error: String
  reservation: Reservation
}

type ConfirmSecretResponse {
  ok: Boolean!
  error: String
  token: String
}

type CreateAccountResponse {
  ok: Boolean!
  error: String
}

type EditUserResponse {
  ok: Boolean!
  error: String
}

type RequestSecretResponse {
  ok: Boolean!
  error: String
}
